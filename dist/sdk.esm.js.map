{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/token.ts","../src/entities/quantize.ts"],"sourcesContent":["  \r\nimport JSBI from 'jsbi'\r\n\r\nexport const QUANTIZED_ADDRESS = '0x8c1f3365F11cf2E401340CD2425dDBcefa300040'\r\nexport const FACTORY_ADDRESS = '0xEf27F45DB678Fa3FC35d73E86D239E12f8e26FD7'\r\nexport const MULTITOKEN_ADDRESS = '0xf377E4CDd42C3Acf37D01dB69Fe8E669c7Afb11B'\r\nexport const FEETRACKER_ADDRESS = '0xea6EC95E6FdeD7B30c147979c8CC76B729ac3d16'\r\nexport const QUANTA_ADDRESS = '0x7017453C48d67f8C63e0335d6781CB49089b26cF'\r\n\r\nexport const QUANTIZED_ERC20_INIT_CODE_HASH = '0xcd4902b65e1285dd3266dd5a6212b18ff94b962e082ca6cd0a3c4538738b4a96'\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\nexport enum QuantizeType {\r\n    QUANTIZE = 0,\r\n    QUANTIZE_ETH = 1,\r\n    DEQUANTIZE = 2\r\n}\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const _999 = JSBI.BigInt(999)\r\nexport const _1000 = JSBI.BigInt(1000)","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientQuantaAvailableError extends Error {\r\n  public readonly isInsufficientQuantaAvailableError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n","import invariant from 'tiny-invariant'\r\nimport {validateAndParseAddress } from '@uniswap/sdk-core'\r\nimport { ChainId, Currency, Token } from '@uniswap/sdk-core'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport { FACTORY_ADDRESS, QUANTIZED_ADDRESS, MULTITOKEN_ADDRESS,  QUANTIZED_ERC20_INIT_CODE_HASH, QUANTA_ADDRESS } from '../constants'\r\n\r\nexport const computeQuantizedAddress = ({\r\n  tokenAddress\r\n}: {\r\n  tokenAddress: string\r\n}): string => {\r\n  return getCreate2Address(\r\n    FACTORY_ADDRESS,\r\n    keccak256(['bytes','bytes','bytes'], [pack(['address'], [QUANTIZED_ADDRESS]),pack(['address'], [MULTITOKEN_ADDRESS]),pack(['address'], [tokenAddress])]),\r\n    QUANTIZED_ERC20_INIT_CODE_HASH\r\n  )\r\n}\r\n\r\nexport class QuantizedToken extends Token {\r\n\r\n  public readonly token: Token;\r\n\r\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(chainId, validateAndParseAddress(computeQuantizedAddress({tokenAddress:address})), decimals, `^${symbol}`, `Quantized ${name}`)\r\n    this.token = new Token(chainId, address, decimals, symbol, name);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: QuantizedToken): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address && this.token === other.token\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\n\r\nexport const QUANTA: { [chainId in ChainId]: QuantizedToken } = {\r\n  [ChainId.MAINNET]: new QuantizedToken(\r\n    ChainId.MAINNET,\r\n    QUANTA_ADDRESS,\r\n    18,\r\n    'QUANTA',\r\n    'Quanta'\r\n  ),\r\n  [ChainId.ROPSTEN]: new QuantizedToken(\r\n    ChainId.ROPSTEN,\r\n    QUANTA_ADDRESS,\r\n    18,\r\n    'QUANTA',\r\n    'Quanta'\r\n  ),\r\n  [ChainId.RINKEBY]: new QuantizedToken(\r\n    ChainId.RINKEBY,\r\n    QUANTA_ADDRESS,\r\n    18,\r\n    'QUANTA',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÖRLI]: new QuantizedToken(ChainId.GÖRLI, QUANTA_ADDRESS, 18, 'QUANTA', 'Wrapped QUANTA'),\r\n  [ChainId.KOVAN]: new QuantizedToken(ChainId.KOVAN, QUANTA_ADDRESS, 18, 'QUANTA', 'Wrapped QUANTA')\r\n}\r\n","import {\r\n  ChainId,\r\n  Currency,\r\n  CurrencyAmount,\r\n  ETHER,\r\n  Token,\r\n  TokenAmount\r\n} from '@uniswap/sdk-core'\r\n\r\nimport { QUANTA, QuantizedToken } from '../entities/token'\r\n\r\nimport { QuantizeType } from '../constants'\r\n\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nexport function quantizedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === ETHER) return new TokenAmount(QUANTA[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nexport function quantizedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === ETHER) return QUANTA[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Quantize {\r\n  /**\r\n   * The token or currency \r\n   */\r\n  public readonly token: Token | QuantizedToken | Currency\r\n  /**\r\n   * The type of the quantize op\r\n   */\r\n  public readonly tradeType: QuantizeType\r\n  /**\r\n   * The input amount for the quantize\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the quantize after fees\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static quantize(token: Token, amountIn: CurrencyAmount): Quantize {\r\n    return new Quantize(token, amountIn, QuantizeType.QUANTIZE)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static quantizeEth(token: Currency, amountIn: CurrencyAmount): Quantize {\r\n    return new Quantize(token, amountIn, QuantizeType.QUANTIZE_ETH)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n    public static dequantize(token: QuantizedToken, amountIn: CurrencyAmount): Quantize {\r\n    return new Quantize(token, amountIn, QuantizeType.DEQUANTIZE)\r\n  }\r\n\r\n\r\n  public constructor(token: Token | QuantizedToken | Currency, amount: CurrencyAmount, quantizeType: QuantizeType) {\r\n\r\n    this.token = token\r\n    this.tradeType = quantizeType\r\n    this.inputAmount =\r\n    quantizeType === QuantizeType.QUANTIZE || QuantizeType.DEQUANTIZE\r\n        ? amount\r\n        : CurrencyAmount.ether(amount.raw)\r\n    this.outputAmount =\r\n    quantizeType === QuantizeType.QUANTIZE || QuantizeType.DEQUANTIZE\r\n        ? amount\r\n        : CurrencyAmount.ether(amount.raw)\r\n\r\n  }\r\n\r\n}"],"names":["QUANTIZED_ADDRESS","FACTORY_ADDRESS","MULTITOKEN_ADDRESS","FEETRACKER_ADDRESS","QUANTA_ADDRESS","QUANTIZED_ERC20_INIT_CODE_HASH","QuantizeType","CAN_SET_PROTOTYPE","Object","InsufficientQuantaAvailableError","name","constructor","setPrototypeOf","prototype","Error","computeQuantizedAddress","tokenAddress","getCreate2Address","keccak256","pack","QuantizedToken","chainId","address","decimals","symbol","validateAndParseAddress","token","Token","equals","other","sortsBefore","invariant","toLowerCase","currencyEquals","currencyA","currencyB","QUANTA","ChainId","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","quantizedAmount","currencyAmount","TokenAmount","currency","ETHER","raw","quantizedCurrency","Quantize","amount","quantizeType","tradeType","inputAmount","QUANTIZE","DEQUANTIZE","CurrencyAmount","ether","outputAmount","quantize","amountIn","quantizeEth","QUANTIZE_ETH","dequantize"],"mappings":"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"}