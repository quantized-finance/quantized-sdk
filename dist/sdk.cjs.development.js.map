{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/quantize.ts"],"sourcesContent":["export const FACTORY_ADDRESS = '0x1da48ae241B984C8BA795677616DCc13b93e4d60'\r\n\r\nexport const INIT_CODE_HASH = '0xfae899166b643caca96e31150882fba4e4f9081412d03b8c39cc844124b91e22'\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientQuantaAvailableError extends Error {\r\n  public readonly isInsufficientQuantaAvailableError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n","import {\r\n  CurrencyAmount,\r\n} from '@uniswap/sdk-core'\r\n\r\nimport {\r\n  QuantizedToken,\r\n} from '@quantized/sdk-core'\r\n\r\nexport declare enum QuantizeType {\r\n  QUANTIZE = 0,\r\n  QUANTIZE_ETH = 1,\r\n  DEQUANTIZE = 2,\r\n  DEQUANTIZE_WITH_ETH = 3\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Quantize {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly token: QuantizedToken\r\n  /**\r\n   * The type of the quantization, quantize, dequantize, quantizeEth, dequantizeWithEth\r\n   */\r\n  public readonly quantizeType: QuantizeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly amount: CurrencyAmount\r\n  \r\n  /**\r\n   * Constructs a quantize op given a token and an amount\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static quantize(token: QuantizedToken, amountIn: CurrencyAmount): Quantize {\r\n    return new Quantize(token, amountIn, QuantizeType.QUANTIZE)\r\n  }\r\n\r\n  /**\r\n   * Constructs a quantize op given a token and an amount\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static quantizeEth(token: QuantizedToken, amountIn: CurrencyAmount): Quantize {\r\n    return new Quantize(token, amountIn, QuantizeType.QUANTIZE_ETH)\r\n  }\r\n\r\n  /**\r\n   * Constructs a dequantize op given a token and an amount\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static dequantize(token: QuantizedToken, amountIn: CurrencyAmount): Quantize {\r\n    return new Quantize(token, amountIn, QuantizeType.DEQUANTIZE)\r\n  }\r\n\r\n  /**\r\n   * Constructs a dequantize op given a token and an amount and uses ETH to pay for quanta\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static dequantizeWithEth(token: QuantizedToken, amountIn: CurrencyAmount): Quantize {\r\n    return new Quantize(token, amountIn, QuantizeType.DEQUANTIZE_WITH_ETH)\r\n  }\r\n\r\n  public constructor(token: QuantizedToken, amount: CurrencyAmount, qType: QuantizeType) {\r\n    this.token = token\r\n    this.quantizeType = qType\r\n    this.amount = amount\r\n  }\r\n\r\n}\r\n"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","CAN_SET_PROTOTYPE","Object","InsufficientQuantaAvailableError","name","constructor","setPrototypeOf","prototype","Error","Quantize","token","amount","qType","quantizeType","quantize","amountIn","QuantizeType","QUANTIZE","quantizeEth","QUANTIZE_ETH","dequantize","DEQUANTIZE","dequantizeWithEth","DEQUANTIZE_WITH_ETH"],"mappings":";;;;IAAaA,eAAe,GAAG;IAElBC,cAAc,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACF9B;AACA,IAAMC,iBAAiB,IAAG,oBAAoBC,MAAvB,CAAvB;AAEA;;;;;AAIA,IAAaC,gCAAb;AAAA;;AAGE;;;AACE;AAHc,4CAAA,GAA2C,IAA3C;AAId,UAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;AACA,QAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,gCAA4B,+EAAWC,SAAvC;;AACxB;;AAPH;AAAA,iCAAsDC,KAAtD;;ACQA;;;;AAIA,IAAaC,QAAb;AAkDE,oBAAmBC,KAAnB,EAA0CC,MAA1C,EAAkEC,KAAlE;AACE,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKG,YAAL,GAAoBD,KAApB;AACA,SAAKD,MAAL,GAAcA,MAAd;AACD;AAxCD;;;;;;;AAdF,WAmBgBG,QAnBhB,GAmBS,kBAAgBJ,KAAhB,EAAuCK,QAAvC;AACL,WAAO,IAAIN,QAAJ,CAAaC,KAAb,EAAoBK,QAApB,EAA8BC,YAAY,CAACC,QAA3C,CAAP;AACD;AAED;;;;;AAvBF;;AAAA,WA4BgBC,WA5BhB,GA4BS,qBAAmBR,KAAnB,EAA0CK,QAA1C;AACL,WAAO,IAAIN,QAAJ,CAAaC,KAAb,EAAoBK,QAApB,EAA8BC,YAAY,CAACG,YAA3C,CAAP;AACD;AAED;;;;;AAhCF;;AAAA,WAqCgBC,UArChB,GAqCS,oBAAkBV,KAAlB,EAAyCK,QAAzC;AACL,WAAO,IAAIN,QAAJ,CAAaC,KAAb,EAAoBK,QAApB,EAA8BC,YAAY,CAACK,UAA3C,CAAP;AACD;AAED;;;;;AAzCF;;AAAA,WA8CgBC,iBA9ChB,GA8CS,2BAAyBZ,KAAzB,EAAgDK,QAAhD;AACL,WAAO,IAAIN,QAAJ,CAAaC,KAAb,EAAoBK,QAApB,EAA8BC,YAAY,CAACO,mBAA3C,CAAP;AACD,GAhDH;;AAAA;AAAA;;;;;;;"}