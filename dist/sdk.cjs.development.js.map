{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/quantize.ts","../src/entities/token.ts"],"sourcesContent":["\r\nexport const QUANTIZED_ADDRESS = '0x8c1f3365F11cf2E401340CD2425dDBcefa300040'\r\nexport const FACTORY_ADDRESS = '0xEf27F45DB678Fa3FC35d73E86D239E12f8e26FD7'\r\nexport const MULTITOKEN_ADDRESS = '0xf377E4CDd42C3Acf37D01dB69Fe8E669c7Afb11B'\r\nexport const FEETRACKER_ADDRESS = '0xea6EC95E6FdeD7B30c147979c8CC76B729ac3d16'\r\nexport const QUANTA_ADDRESS = '0x7017453C48d67f8C63e0335d6781CB49089b26cF'\r\n\r\nexport const QUANTIZED_ERC20_INIT_CODE_HASH = '0xcd4902b65e1285dd3266dd5a6212b18ff94b962e082ca6cd0a3c4538738b4a96'\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientQuantaAvailableError extends Error {\r\n  public readonly isInsufficientQuantaAvailableError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n","import {\r\n  CurrencyAmount,\r\n  TokenAmount,\r\n  Token\r\n} from '@uniswap/sdk-core'\r\n\r\nexport declare enum QuantizeType {\r\n  QUANTIZE = 0,\r\n  QUANTIZE_ETH = 1,\r\n  DEQUANTIZE = 2,\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Quantize {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly token: Token | undefined\r\n  /**\r\n   * The type of the quantization, quantize, dequantize, quantizeEth, dequantizeWithEth\r\n   */\r\n  public readonly quantizeType: QuantizeType\r\n  \r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly amount: CurrencyAmount | TokenAmount\r\n  \r\n  /**\r\n   * Constructs a quantize op given a token and an amount\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static quantize(amountIn: TokenAmount): Quantize {\r\n    return new Quantize(amountIn, QuantizeType.QUANTIZE)\r\n  }\r\n\r\n  /**\r\n   * Constructs a quantize op given a token and an amount\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static quantizeEth(amountIn: CurrencyAmount): Quantize {\r\n    return new Quantize(amountIn, QuantizeType.QUANTIZE_ETH)\r\n  }\r\n\r\n  /**\r\n   * Constructs a dequantize op given a token and an amount\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static dequantize(amountIn: TokenAmount): Quantize {\r\n    return new Quantize(amountIn, QuantizeType.DEQUANTIZE)\r\n  }\r\n\r\n  public constructor(amount: TokenAmount | CurrencyAmount, qType: QuantizeType) {\r\n    this.token = amount instanceof TokenAmount ? amount.token : undefined\r\n    this.quantizeType = qType\r\n    this.amount = amount\r\n  }\r\n\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport {validateAndParseAddress } from '@uniswap/sdk-core'\r\nimport { ChainId, Currency, Token } from '@uniswap/sdk-core'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport { FACTORY_ADDRESS, QUANTIZED_ADDRESS, MULTITOKEN_ADDRESS,  QUANTIZED_ERC20_INIT_CODE_HASH, QUANTA_ADDRESS } from '../constants'\r\n\r\nexport const computeQuantizedAddress = ({\r\n  tokenAddress\r\n}: {\r\n  tokenAddress: string\r\n}): string => {\r\n  return getCreate2Address(\r\n    FACTORY_ADDRESS,\r\n    keccak256(['bytes','bytes','bytes'], [pack(['address'], [QUANTIZED_ADDRESS]),pack(['address'], [MULTITOKEN_ADDRESS]),pack(['address'], [tokenAddress])]),\r\n    QUANTIZED_ERC20_INIT_CODE_HASH\r\n  )\r\n}\r\n\r\nexport class QuantizedToken extends Token {\r\n\r\n  public readonly token: Token;\r\n\r\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(chainId, validateAndParseAddress(computeQuantizedAddress({tokenAddress:address})), decimals, `^${symbol}`, `Quantized ${name}`)\r\n    this.token = new Token(chainId, address, decimals, symbol, name);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: QuantizedToken): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address && this.token === other.token\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\n\r\nexport const QUANTA: { [chainId in ChainId]: QuantizedToken } = {\r\n  [ChainId.MAINNET]: new QuantizedToken(\r\n    ChainId.MAINNET,\r\n    QUANTA_ADDRESS,\r\n    18,\r\n    'QUANTA',\r\n    'Quanta'\r\n  ),\r\n  [ChainId.ROPSTEN]: new QuantizedToken(\r\n    ChainId.ROPSTEN,\r\n    QUANTA_ADDRESS,\r\n    18,\r\n    'QUANTA',\r\n    'Quanta'\r\n  ),\r\n  [ChainId.RINKEBY]: new QuantizedToken(\r\n    ChainId.RINKEBY,\r\n    QUANTA_ADDRESS,\r\n    18,\r\n    'QUANTA',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÖRLI]: new QuantizedToken(ChainId.GÖRLI, QUANTA_ADDRESS, 18, 'QUANTA', 'Wrapped QUANTA'),\r\n  [ChainId.KOVAN]: new QuantizedToken(ChainId.KOVAN, QUANTA_ADDRESS, 18, 'QUANTA', 'Wrapped QUANTA')\r\n}\r\n"],"names":["QUANTIZED_ADDRESS","FACTORY_ADDRESS","MULTITOKEN_ADDRESS","FEETRACKER_ADDRESS","QUANTA_ADDRESS","QUANTIZED_ERC20_INIT_CODE_HASH","CAN_SET_PROTOTYPE","Object","InsufficientQuantaAvailableError","name","constructor","setPrototypeOf","prototype","Error","Quantize","amount","qType","token","TokenAmount","undefined","quantizeType","quantize","amountIn","QuantizeType","QUANTIZE","quantizeEth","QUANTIZE_ETH","dequantize","DEQUANTIZE","computeQuantizedAddress","tokenAddress","getCreate2Address","keccak256","pack","QuantizedToken","chainId","address","decimals","symbol","validateAndParseAddress","Token","equals","other","sortsBefore","invariant","toLowerCase","currencyEquals","currencyA","currencyB","QUANTA","ChainId","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN"],"mappings":"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"}